# Generated by Django 5.2 on 2025-06-09 15:24

import apps.users.generators
import apps.users.validators
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import dynamic_filenames
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "id",
                    models.CharField(
                        default=apps.users.generators.generate_ulid,
                        editable=False,
                        max_length=26,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("client_id", models.CharField(max_length=100, unique=True)),
                (
                    "client_secret",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("client_name", models.CharField(max_length=200)),
                (
                    "client_type",
                    models.CharField(
                        choices=[
                            ("confidential", "Confidential"),
                            ("public", "Public"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "redirect_uris",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        help_text="Comma separated URIs",
                        size=None,
                    ),
                ),
                (
                    "scope",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        help_text="Scopes that the client can request",
                        size=None,
                    ),
                ),
                ("require_pkce", models.BooleanField(default=False)),
                (
                    "allowed_grant_types",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        help_text="Allowed grant types for the client",
                        size=None,
                    ),
                ),
                ("jwks_uri", models.URLField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "id",
                    models.CharField(
                        default=apps.users.generators.generate_ulid,
                        editable=False,
                        max_length=26,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            apps.users.validators.username_validator,
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z0-9_-]+#[0-9]{4}$",
                                message="Username is not valid for this regex `^[a-zA-Z0-9_-]+#[0-9]{4}$`",
                            ),
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Required. A valid email with a valid domain",
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        default=None,
                        null=True,
                        upload_to=dynamic_filenames.FilePattern(
                            filename_pattern="avatar/{uuid:s}{ext}"
                        ),
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "user",
                "unique_together": {("username", "email")},
            },
        ),
        migrations.CreateModel(
            name="AuthorizationCode",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "id",
                    models.CharField(
                        default=apps.users.generators.generate_ulid,
                        editable=False,
                        max_length=26,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("expires_at", models.DateTimeField()),
                ("code", models.CharField(max_length=255, unique=True)),
                ("redirect_uri", models.TextField()),
                ("scope", models.TextField()),
                ("nonce", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "code_challenge",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "code_challenge_method",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.client"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "id",
                    models.CharField(
                        default=apps.users.generators.generate_ulid,
                        editable=False,
                        max_length=26,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("expires_at", models.DateTimeField()),
                ("access_token", models.CharField(max_length=255, unique=True)),
                (
                    "refresh_token",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("token_type", models.CharField(default="Bearer", max_length=20)),
                ("scope", models.TextField()),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.client"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
